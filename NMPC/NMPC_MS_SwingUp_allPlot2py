import casadi
import matplotlib.pyplot as plt
import numpy as np
import time
import matplotlib.animation as animation

# Non Linear Model (ODEs)
def dynamic(x_state, u):
    # x = [x dx th dth];
    # System constants
    g = 9.81
    L = 0.6
    l = L / 2
    m = 0.2
    M = 0.7

    # States
    x = x_state[0]
    dx = x_state[1]
    th = x_state[2]
    dth = x_state[3]

    q_th = 0.001
    Mf = q_th * dth

    q_x = 0.01
    Ff = -q_x * dx

    f = u[0]
    ddx = (m * g * casadi.sin(th) * casadi.cos(th) - (7/3) * (f + m * l * dth * dth * casadi.sin(th) + Ff) - (Mf * casadi.cos(th)) / l) / (m * casadi.cos(th) * casadi.cos(th) - (7/3) * M)
    ddth = (M * g * casadi.sin(th) - casadi.cos(th) * (f + m * l * dth * dth * casadi.sin(th) + Ff) - (M * Mf) / (m * l)) / ((7/3) * M * l - m * l * casadi.cos(th) * casadi.cos(th))

    return casadi.vertcat(dx, ddx, dth, ddth)

# Numeric Integrator RK4
def rk4(ode, h, xs, u):
    k1 = ode(xs, u)
    k2 = ode(xs + h/2 * k1, u)
    k3 = ode(xs + h/2 * k2, u)
    k4 = ode(xs + h * k3, u)

    return xs + h/6 * (k1 + 2*k2 + 2*k3 + k4)

opti = casadi.Opti()

T = 20  # Seconds
N = 40  # Prediction Horizon

# Parameters
opt_x0 = opti.parameter(4)  # initial state
ref = opti.parameter(4)  # reference state

# Variables
X = opti.variable(4, N + 1)
x = X[0, :]     # Cart position
dx = X[1, :]    # Cart velocity
th = X[2, :]    # Pendulum angle
dth = X[3, :]   # Pendulum angular velocity

# Control
U = opti.variable(1, N)  # Force

dt = 0.05  # Discretization time

# Input Constraints
opti.subject_to(opti.bounded(-10, U, 10))

# Initial Conditions
opti.subject_to(X[:, 0] == opt_x0)
for k in range(0, N):
    k1 = dynamic(X[:, k], U[0, k])
    k2 = dynamic(X[:, k] + dt/2 * k1, U[0, k])
    k3 = dynamic(X[:, k] + dt/2 * k2, U[0, k])
    k4 = dynamic(X[:, k] + dt * k3, U[0, k])
    x_next = X[:, k] + dt/6 * (k1 + 2*k2 + 2*k3 + k4)
    opti.subject_to(X[:, k+1] == x_next)

# Cost matrices
Q = np.eye(4)
R = np.eye(1)

# Cost function
obj = 0  # cost J = x'Qx - u'Ru
for i in range(N):
    err = X[:, i] - ref
    obj = obj + casadi.mtimes(casadi.mtimes(err.T, Q), err) + U[0, i] * R * U[0, i]

opti.minimize(obj)
opts_setting = {'ipopt.print_level': 0, 'print_time': 0, 'ipopt.acceptable_tol': 1e-8, 'ipopt.acceptable_obj_change_tol': 1e-6}
opti.solver('ipopt', opts_setting)

final_state = np.array([0, 0, 0, 0])  # UPRIGHT position
init_state = np.array([0, 0, np.pi, 0])  # Initial position

opti.set_value(ref, final_state)

current_state = init_state.copy()
u0 = np.zeros((1, N))
next_states = np.zeros((4, N + 1))

# FOR LOGGING
U_log = np.zeros((1, 500))
X_log = np.zeros((4, 500))

mpciter = 0
while np.linalg.norm(current_state - final_state) > 1e-3 and mpciter < 500:
    opti.set_value(opt_x0, current_state)  # Set the constraint again
    opti.set_initial(U, u0)  # RESET the U variable (INPUTS)
    opti.set_initial(X, next_states)  # RESET the X variable (STATES)

    sol = opti.solve()

    u_solved = sol.value(U)
    x_solved = sol.value(X)

    current_state = rk4(dynamic, dt, current_state, u_solved)
    u0 = u_solved[0]

    print(mpciter, np.linalg.norm(current_state - final_state), x_solved[:, 0], u_solved[0])
    U_log[0, mpciter] = u_solved[0]
    X_log[:, mpciter] = x_solved[:, 0]
    mpciter = mpciter + 1

X_log = X_log[:, 0:mpciter]
U_log = U_log[0, 0:mpciter]

timestr = time.strftime("%Y%m%d-%H%M%S")

# Convert time steps to seconds
time_steps = np.arange(0, mpciter * dt, dt)

# Calculate axis limits based on the full range of data
x_limits = [time_steps[0], time_steps[-1]]
y_limits_states = [
    [np.min(X_log[i, :]) - 0.4, np.max(X_log[i, :]) + 0.4] for i in range(4)
]
y_limits_u = [np.min(U_log)- 0.4, np.max(U_log) + 0.4]

# Animation setup
fig, axs = plt.subplots(5, 1, figsize=(10, 10), sharex=True)
colors = ['tab:blue', 'tab:green', 'tab:orange', 'tab:red', 'tab:purple']
states = ["Cart Position (x)", "Cart Velocity (dx)", "Pendulum Angle (th)", "Pendulum Angular Velocity (dth)", "Input Command (u)"]
y_labels = ["Position (m)", "Velocity (m/s)", "Angle (rad)", "Angular Velocity (rad/s)", "Force (N)"]

lines = []
for i in range(4):
    ax = axs[i]
    line, = ax.plot([], [], lw=2, color=colors[i])
    lines.append(line)
    ax.set_ylabel(y_labels[i])
    ax.set_xlim(x_limits)
    ax.set_ylim(y_limits_states[i])
    ax.grid()

line_u, = axs[4].plot([], [], lw=2, color=colors[4])
axs[4].set_ylabel(y_labels[4])
axs[4].set_xlim(x_limits)
axs[4].set_ylim(y_limits_u)
axs[4].set_xlabel('Time (seconds)')
axs[4].grid()
lines.append(line_u)

def init():
    for line in lines:
        line.set_data([], [])
    return lines

def animate(i):
    for j, line in enumerate(lines[:-1]):
        line.set_data(time_steps[:i], X_log[j, :i])
    lines[-1].set_data(time_steps[:i], U_log[:i])
    return lines

ani = animation.FuncAnimation(fig, animate, init_func=init, frames=mpciter, blit=True)
ani.save('CartPole_States_{}.gif'.format(timestr), writer='ffmpeg', fps=15)

# Animation of the pendulum
L = 1
fig2 = plt.figure(figsize=(10, 10))
ax2 = fig2.add_subplot(autoscale_on=False, xlim=(-3.5, 3.5), ylim=(-2, 2))
ax2.set_aspect('equal')
ax2.grid(True)

cart_line, = ax2.plot([], [], 's-', lw=8, markersize=12)
line, = ax2.plot([], [], 'o-', lw=2, markersize=6)

def animate_pendulum(i):
    cart_pos = X_log[0, i]
    theta = X_log[2, i]
    x_pend = cart_pos + L * np.sin(theta)
    y_pend = L * np.cos(theta)
    line.set_data([cart_pos, x_pend], [0, y_pend])
    cart_line.set_data([cart_pos - 0.2, cart_pos + 0.2], [0, 0])
    return line, cart_line

ani_pendulum = animation.FuncAnimation(fig2, animate_pendulum, frames=mpciter, blit=True)
ani_pendulum.save('SwingUp_{}.gif'.format(timestr), writer='ffmpeg', fps=15)

plt.show()
